noComm = modTable[modTable==0,2]
modTable$relAll = with(modTable, Freq/membersNumber*100)
modTable$relOrg = with(modTable, Freq/(membersNumber-noComm)*100)
modTable = merge(modTable,colComB, by="modCount")
#modTable = modTable[!modTable$mod==0,]
modTable = modTable[order(-modTable$Freq),]
test = modTable[modTable$relOrg > 1,]
data1 = data[!data$val == "NA",]
data1 = data1[!data1$val == "Unknown",]
data1 = data1[!data1$val == "No Information",]
generateReport <- function(comm, categ, label){
sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
sub = sub[sub$cat == categ,]
sub = sub[order(sub$freq),]
# bar plot
par(las=2) # make label text perpendicular to axis
par(mar=c(3,20,0,3)) # increase y-axis margin.
if (nrow(sub) <= 10) {
l1 = 1
l2 = nrow(sub)
} else {
l1 = nrow(sub)-10
l2 = nrow(sub)
}
barsub = sub[l1:l2,]
barplot(barsub$freq, horiz=TRUE, names.arg=barsub$val, cex.names=1.2)
title(ylab=paste("Top 10", label), line=18, cex.lab=2)
#   # wordcloud
#   wordcloud(words = sub$val, freq = sub$freq, min.freq = 1, scale=c(3,.5),
#             max.words=200, random.order=FALSE, rot.per=0,
#             colors=brewer.pal(8, "Dark2"))
#
#   # table
#   table = sub[order(-sub$freq),]
#   table = table[table$freq > 1,]
#   table = subset(table, select = -c(mod,cat) )
#   names(table) = c(label, "Scholars")
#
#   knitr::kable((table))
}
listReport <- function(comm, categ){
# comm = "1"
# categ = "SUBDISC"
sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
sub = sub[sub$cat == categ,]
sub = sub[order(sub$freq),]
# table
table = sub[order(-sub$freq),]
table = table[table$freq > 1,]
table = subset(table, select = -c(mod,cat) )
#names(table) = c(label, "Scholars")
listReport <- paste0(table$val," (",table$freq,")")
return(listReport)
}
topList <- function(comm, categ){
# comm = "1"
# categ = "SUBDISC"
sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
sub = sub[sub$cat == categ,]
sub = sub[order(sub$freq),]
# table
table = sub[order(-sub$freq),]
table = table[table$freq > 1,]
table = subset(table, select = -c(mod,cat) )
top = 5
if (nrow(table) <= top) {
l1 = 1
l2 = nrow(table)
} else {
l1 = 1
l2 = top
}
table = table[l1:l2,]
#names(table) = c(label, "Scholars")
listReport <- paste0(table$val," (",table$freq,")")
return(listReport)
}
# listPeopleReport <- function(comm, categ){
#   # comm = "1"
#   # categ = "PERSON"
#   sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
#   sub = sub[sub$cat == categ,]
#   sub = sub[order(sub$freq),]
#
#   # table
#   table = sub[order(-sub$freq),]
#   table = table[table$freq > 1,]
#   table = subset(table, select = -c(mod,cat) )
#   #names(table) = c(label, "Scholars")
#
#   # unlist(strsplit(t, "[:]"))[index]
#
#   u1 = '<a href="https://mesana.org/mymesa/directory_mem.php?mem='
#   u2 = 'target="_blank">'
#   u3 = '</a>'
#
#   listReport <- paste0(u1,
#                        unlist(strsplit(table$val,"[:]"))[1],
#                        u2,
#                        unlist(strsplit(table$val,"[:]"))[2],
#                        u3,
#                        " (*weight:* ",
#                        table$freq,")")
#   return(listReport)
# }
modTable$modCount[1]
modTable
modTable$modCount[1]
modTable$group[1]
tolower(modTable$group[1])
gsub(" \)?", "-", tolower(modTable$group[1]))
gsub(" \\)?", "-", tolower(modTable$group[1]))
gsub(" \\(?", "-", tolower(modTable$group[1]))
gsub(" \\(?", "-", tolower(modTable$group[1]))[:-1]
gsub("\\)", "", gsub(" \\(?", "-", tolower(modTable$group[1])))
head(data1)
# comm = "1"
# categ = "SUBDISC"
sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
comm = "1"
categ = "SUBDISC"
sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
sub = sub[sub$cat == categ,]
sub = sub[order(sub$freq),]
sub
summary(sub$freq)
quantile(sub$freq, 0.25)
quantile(sub$freq, 0.75)
table = sub[order(-sub$freq),]
table = table[table$freq > quantile(sub$freq, 0.75),]
table
table = table[table$freq > quantile(sub$freq, 0.90),]
table
top10percent <- function(comm, categ){
# comm = "1"
# categ = "SUBDISC"
sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
sub = sub[sub$cat == categ,]
sub = sub[order(sub$freq),]
# table
table = sub[order(-sub$freq),]
table = table[table$freq > quantile(sub$freq, 0.90),]
table = subset(table, select = -c(mod,cat) )
# if (nrow(table) <= top) {
#  l1 = 1
#  l2 = nrow(table)
# } else {
#  l1 = 1
#  l2 = top
# }
listReport <- paste0(table$val," (",table$freq,")")
return(listReport)
}
top10percent("1", "DICS")
top10percent("1", "DISC")
top10percent("2", "DISC")
top10percent("3", "DISC")
top10percent("4", "DISC")
top10percent("5", "DISC")
top10percent("6", "DISC")
top10percent("7", "DISC")
top10percent("7", "LANG")
topOutliers <- function(comm, categ){
# comm = "1"
# categ = "SUBDISC"
sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
sub = sub[sub$cat == categ,]
sub = sub[order(sub$freq),]
# table
table = sub[order(-sub$freq),]
table = table[table$freq >= quantile(sub$freq)[4]*1.5,]
table = subset(table, select = -c(mod,cat) )
# if (nrow(table) <= top) {
#  l1 = 1
#  l2 = nrow(table)
# } else {
#  l1 = 1
#  l2 = top
# }
listReport <- paste0(table$val," (",table$freq,")")
return(listReport)
}
topOutliers("6", "DISC")
topOutliers("1", "DISC")
topOutliers("2", "DISC")
topOutliers("3", "DISC")
topOutliers("4", "DISC")
topOutliers("4", "EDU")
table
head(table)
topOutliers <- function(comm, categ){
# comm = "1"
# categ = "SUBDISC"
sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
sub = sub[sub$cat == categ,]
sub = sub[order(sub$freq),]
# table
table = sub[order(-sub$freq),]
table = table[table$freq >= quantile(sub$freq)[4]*1.5,]
table = table[table$freq >= quantile(sub$freq)[4],]
table = subset(table, select = -c(mod,cat) )
# if (nrow(table) <= top) {
#  l1 = 1
#  l2 = nrow(table)
# } else {
#  l1 = 1
#  l2 = top
# }
listReport <- paste0(table$val," (",table$freq,")")
return(listReport)
}
topOutliers("4", "EDU")
topOutliers <- function(comm, categ){
# comm = "1"
# categ = "SUBDISC"
sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
sub = sub[sub$cat == categ,]
sub = sub[order(sub$freq),]
# table
table = sub[order(-sub$freq),]
table = table[table$freq >= quantile(sub$freq)[1],]
table = table[table$freq >= quantile(sub$freq)[4]*1.5,]
#table = table[table$freq >= quantile(sub$freq)[4],]
table = subset(table, select = -c(mod,cat) )
listReport <- paste0(table$val," (",table$freq,")")
return(listReport)
}
topOutliers("4", "EDU")
sub = data1[data1$mod == modTable$modCount[as.integer(comm)],]
sub = sub[sub$cat == categ,]
sub = sub[order(sub$freq),]
table = sub[order(-sub$freq),]
table = table[table$freq >= quantile(sub$freq)[1],]
nrow(table)
table = table[table$freq >= quantile(sub$freq)[4]*1.5,]
nrow(table)
table
table = sub[order(-sub$freq),]
table = table[table$freq >= quantile(sub$freq)[4]*1.5,]
nrow(table)
table = sub[order(-sub$freq),]
nrow(table)
table = table[table$freq >= quantile(sub$freq)[1],]
nrow(table)
table = sub[order(-sub$freq),]
nrow(table)
table = table[table$freq >= quantile(table$freq)[1],]
nrow(table)
table = table[table$freq >= quantile(table$freq)[2],]
nrow(table)
table = table[table$freq >= quantile(table$freq)[4]*1.5,]
nrow(table)
table[1:5]
table = sub[order(-sub$freq),]
table = table[table$freq >= quantile(table$freq)[2],]
table = table[table$freq >= quantile(table$freq)[4]*3,]
table
table = sub[order(-sub$freq),]
table = table[table$freq >= quantile(table$freq)[4]*3,]
listReport <- paste0(table$val," (",table$freq,")")
table
knit_with_parameters('~/Documents/_ResearchData/MESA_Conferences/R_Markdown/2016-12-01-mesa.Rmd')
featType    = c("w", "c")
featType[2]
library(stylo)
print("")
print(paste("==================\n","Generating:", i, "for", ii, "features (", featType, featLen, ")\n=================="))
for (i in classifiers){
for (ii in mfwVector){
for (iii in featType){
if (iii == "w"){
featType = "w"
featLen  = "1"
incr = 1
} else {
featType = "c"
featLen  = "2"
incr = 2
}
print(paste("==================\\n","Generating:", i, "for", ii, "features (", featType, featLen, ")\\n=================="))
rolling.classify(write.pdf.file = TRUE, corpus.lang="Other",
analyzed.features = featType, ngram.size = featLen,
classification.method = i, mfw=ii+incr,
use.existing.freq.tables = TRUE,
training.set.sampling = "normal.sampling",
slice.size = 5000, slice.overlap = 4500,
milestone.labels = milestone_labels)
}
}
}
classifiers = c("svm", "delta", "nsc")
mfwVector   = c(100, 300, 500, 1000)
featType    = c("w", "c")
for (i in classifiers){
for (ii in mfwVector){
for (iii in featType){
if (iii == "w"){
featType = "w"
featLen  = "1"
incr = 1
} else {
featType = "c"
featLen  = "2"
incr = 2
}
print(paste("==================\\n","Generating:", i, "for", ii, "features (", featType, featLen, ")\\n=================="))
rolling.classify(write.pdf.file = TRUE, corpus.lang="Other",
analyzed.features = featType, ngram.size = featLen,
classification.method = i, mfw=ii+incr,
use.existing.freq.tables = TRUE,
training.set.sampling = "normal.sampling",
slice.size = 5000, slice.overlap = 4500,
milestone.labels = milestone_labels)
}
}
}
paste("==================\\n","Generating:", i, "for", ii, "features (", featType, featLen, ")\\n==================")
print("==================\\n","Generating:", i, "for", ii, "features (", featType, featLen, ")\\n==================")
rep=paste("==================\\n","Generating:", i, "for", ii, "features (", featType, featLen, ")\\n=================="))
rep=paste("==================\\n","Generating:", i, "for", ii, "features (", featType, featLen, ")\\n==================")
print(per)
print(rep)
rep=paste("==================\n","Generating:", i, "for", ii, "features (", featType, featLen, ")\n==================")
print(rep)
rep=paste("==================Generating:", i, "for", ii, "features (", featType, featLen, ")==================")
print(rep)
rep=paste("==================Generating:", i, "for", ii, "features (", featType, featLen, ")==================")
cat(rep)
rep=paste("==================\nGenerating:", i, "for", ii, "features (", featType, featLen, ")==================")
cat(rep)
rep=paste("==================Generating:", i, "for", ii, "features (", featType, featLen, ")==================")
cat(rep)
library(readr)
library(readr)
networkFile = "/Users/romanov/Dropbox/KITAB Development Work/networkBooks_noOutliers_Type_directed.csv"
dispatch.articles <- read.csv(file=networkFile,
header=F, sep="\t", quote="",
stringsAsFactors=FALSE)
networkData <- read.csv(file=networkFile,
header=F, sep="\t", quote="",
stringsAsFactors=FALSE)
networkData <- read.csv(file=networkFile,
header=F, sep="\t", quote="",
stringsAsFactors=FALSE)
View(networkData)
networkData <- read.csv(file=networkFile,
header=T, sep="\t", quote="",
stringsAsFactors=FALSE)
summary(networkData$Weight)
((35-5)+(35-10)+(35-15))/3
((35-5)+(35-10)+(35-15)+(35-20))/3
((35-5)+(35-10)+(35-15)+(35-20))/4
((35-5)+(35-10)+(35-20))/3
((35-5)+(35-5)+(35-20))/3
library(rstudioapi)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
print(getwd())
dispatch.articles <- read.csv(file="OpenITI_metadata_light_TAGS.csv",
header=F, sep="\t", quote="",
stringsAsFactors=FALSE)
openITImeta <- read.csv(file="/OpenITI_metadata_light_TAGS.csv",
header=F, sep="\t", quote="",
stringsAsFactors=FALSE)
openITImeta <- read.csv(file="../OpenITI_metadata_light_TAGS.csv",
header=F, sep="\t", quote="",
stringsAsFactors=FALSE)
View(openITImeta)
openITImeta <- read.csv(file="../OpenITI_metadata_light_TAGS.csv",
header=T, sep="\t", quote="",
stringsAsFactors=FALSE)
View(openITImeta)
ppe = openITImeta[openITImeta$status=="pri",]
library(dplyr)
ppe = dplyr::filter(ppe, grepl('PPE', TAGS))
View(ppe)
ppe$count = 1
openITIpri = openITImeta[openITImeta$status=="pri",]
openITIpri$count = 1
ppe = dplyr::filter(openITIpri, grepl('PPE', TAGS))
ppe = ppe[order(-ppe$length),]
View(ppe)
openITIpri = openITImeta[openITImeta$status=="pri",]
openITIpri <- subset(openITIpri, select = -c(openITIpri$versionUri,openITIpri$status,openITIpri$url,openITIpri$instantiation))
openITIpri <- subset(openITIpri, select = -c(openITIpri$versionUri),)
openITIpri <- subset(openITIpri, select = -c(openITIpri$versionUri))
openITIpri <- subset(openITIpri, select = -c(versionUri))
openITIpri = openITImeta[openITImeta$status=="pri",]
openITIpri <- subset(openITIpri, select = -c(versionUri,status,url,instantiation))
openITIpri$count = 1
library(dplyr)
ppe = dplyr::filter(openITIpri, grepl('PPE', TAGS))
ppe = ppe[order(-ppe$length),]
ppe$author
authors = unique(ppe$author)
authors
for (a in authors){
print("=====")
print(a)
}
for (a in authors){
print("=====")
print(a)
temp = ppe[ppe$author==a,]
temp = temp[order(-temp$length),]
print(temp$book[1])
}
for (a in authors[:10]){
print("=====")
print(a)
temp = ppe[ppe$author==a,]
temp = temp[order(-temp$length),]
print(temp$book[1])
print(temp$length[1])
}
for (a in authors[1:10]){
print("=====")
print(a)
temp = ppe[ppe$author==a,]
temp = temp[order(-temp$length),]
print(temp$book[1])
print(temp$length[1])
}
temp$length[1]
sum(temp$length[1])
sum(temp$length)
sum(temp$author)
(temp$author)
library(dplyr)
ppe = dplyr::filter(openITIpri, grepl('PPE', TAGS))
ppe = ppe[order(-ppe$length),]
authors = unique(ppe$author)
results = NULL
for (a in authors[1:15]){
print("=====")
row = c()
row = c(row, a)
temp = ppe[ppe$author==a,]
temp = temp[order(-temp$length),]
row = c(row, temp$book[1])
row = c(row, temp$length[1])
temp = openITIpri[openITIpri$author==a,]
row = c(row, nrow(temp))
row = c(row, sum(temp$length))
dispatchDF = rbind(dispatchDF, row)
}
authors = unique(ppe$author)
results = NULL
for (a in authors[1:15]){
print("=====")
row = c()
row = c(row, a)
temp = ppe[ppe$author==a,]
temp = temp[order(-temp$length),]
row = c(row, temp$book[1])
row = c(row, temp$length[1])
temp = openITIpri[openITIpri$author==a,]
row = c(row, nrow(temp))
row = c(row, sum(temp$length))
results = rbind(dispatchDF, row)
}
authors = unique(ppe$author)
results = NULL
for (a in authors[1:15]){
print("=====")
row = c()
row = c(row, a)
temp = ppe[ppe$author==a,]
temp = temp[order(-temp$length),]
row = c(row, temp$book[1])
row = c(row, temp$length[1])
temp = openITIpri[openITIpri$author==a,]
row = c(row, nrow(temp))
row = c(row, sum(temp$length))
results = rbind(results, row)
}
View(results)
authors = unique(ppe$author)
results = NULL
for (a in authors){
print("=====")
row = c()
row = c(row, a)
temp = ppe[ppe$author==a,]
temp = temp[order(-temp$length),]
row = c(row, temp$book[1])
row = c(row, temp$length[1])
temp = openITIpri[openITIpri$author==a,]
row = c(row, nrow(temp))
row = c(row, sum(temp$length))
results = rbind(results, row)
}
View(results)
results = as.data.frame(results)
results = NULL
for (a in authors){
row = c()
row = c(row, a)
temp = ppe[ppe$author==a,]
temp = temp[order(-temp$length),]
row = c(row, temp$book[1])
row = c(row, temp$length[1])
temp = openITIpri[openITIpri$author==a,]
row = c(row, nrow(temp))
row = c(row, sum(temp$length))
results = rbind(results, row)
}
results = as.data.frame(results, stringsAsFactors=FALSE)
View(results)
write.csv(results, "/polymaths.csv" )
write.csv(results, "../polymaths.csv" )
